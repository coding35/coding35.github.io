[
    {
        "id": "1",
        "type" : "architecture",
        "title": "Ambassador Pattern",
        "subtitle": "Offload common client connectivity tasks in a language agnostic way.",
        "description": "Based on the Sidecar pattern, the Ambassador is an application that runs alongside client applications to provide additional connectivity functionality such as routing, logging, monitoring, authentication, resilience and more.",
        "date": "2023-03-04T19:08:51.568Z",
        "author": "Adam Reed",
        "avatar" : "AR",
        "readTime": 5,
        "content": "",
        "tags": [
        ],
        "image": "../assets/images/shane-rounce-1ZZ96uESRJQ-unsplash-resize.jpg",
        "imageAlt": "",
        "references": [
        ],
        "categories": [
            "architecture"
        ]
    },
    {
        "id": "2",
        "type" : "architecture",
        "title": "Sidecar Pattern",
        "subtitle": "Separate the functionality of an applicaiton into co-located components running along side the core application.",
        "description": "Sidecar components are specialized co-located containers that communicate to the main application over a network interface using lightweight communication protocols such as HTTP, gRPC, or WebSockets.",
        "date": "2023-03-10T19:08:51.568Z",
        "author": "Adam Reed",
        "avatar" : "AR",
        "readTime": 3,
        "content": "",
        "tags": [
        ],
        "image": "../assets/templates/2/Image_by_Peter_Morth_from_Pixabay.jpg",
        "imageAlt": "",
        "references": [

        ],
        "categories": [
            "architecture"
        ]
    },
    {
        "id": "3",
        "type" : "coding",
        "title": "Chaos Engineering",
        "subtitle": "A tool to introduce failure into the system intentionally.",
        "description": "The Chaos Engineering methodology is to build confidence in the system's capability to withstand turbulent conditions in production by intentionally injecting failures into the system.",
        "date": "2023-03-10T19:08:51.568Z",
        "author": "Adam Reed",
        "avatar" : "AR",
        "readTime": 7,
        "content": "",
        "tags": [
            "snippet"
        ],
        "image": "../assets/images/Image_by_Lawrence_Monk_from_Pixabay.jpg",
        "imageAlt": "",
        "references": [

        ],
        "categories": [
            "coding",
            "architecture"
        ]
    },
    {
        "id": "4",
        "type" : "electronics",
        "title": "4-bit Full Adder",
        "subtitle": "Add two 4-bit numbers together using logic gates.",
        "description": "A schematic and breadboard layout of a 4-bit adder using logic gates.",
        "date": "2023-03-11T19:08:51.568Z",
        "author": "Adam Reed",
        "avatar" : "AR",
        "readTime": 5,
        "content": "",
        "tags": [
        ],
        "image": "../assets/images/Image_by_axonite_from_Pixabay.jpg",
        "imageAlt": "",
        "references": [
        ],
        "categories": [
            "electronics"
        ]
    },
    {
        "id": "5",
        "type" : "architecture",
        "title": "Anti-corruption Layer Pattern",
        "subtitle": "A pattern to ensure that an application's design is not limited by dependencies on outside subsystems.",
        "description": "Translates requests that one subsystem makes to the other subsystem.",
        "date": "2023-03-14T19:08:51.568Z",
        "author": "Adam Reed",
        "avatar" : "AR",
        "readTime": 5,
        "content": "",
        "tags": [
        ],
        "image": "../assets/images/Image_by_PIRO_from_Pixabay.jpg",
        "imageAlt": "",
        "references": [

        ],
        "categories": [
            "architecture"
        ]
    }
]